From d080fe2f35ac309b7035b0392d4767b5b04a3e20 Mon Sep 17 00:00:00 2001
From: nitrous <vincents.995@gmail.com>
Date: Mon, 22 Aug 2016 08:18:53 +0000
Subject: [PATCH] packet length for mmostatus increased

---
 src/char/char_mapif.c | 50 +++++++++++++++++++++++++-------------------------
 src/common/socket.c   |  5 +++--
 src/map/chrif.c       | 48 +++++++++++++++++++++++++++---------------------
 3 files changed, 55 insertions(+), 48 deletions(-)

diff --git a/src/char/char_mapif.c b/src/char/char_mapif.c
index bab7cb2..de2d47b 100644
--- a/src/char/char_mapif.c
+++ b/src/char/char_mapif.c
@@ -393,10 +393,10 @@ int chmapif_parse_regmapuser(int fd, int id){
  * @return : 0 not enough data received, 1 success
  */
 int chmapif_parse_reqsavechar(int fd, int id){
-	if (RFIFOREST(fd) < 4 || RFIFOREST(fd) < RFIFOW(fd,2))
+	if (RFIFOREST(fd) < 4 || RFIFOREST(fd) < RFIFOL(fd,2))
 		return 0;
 	else {
-		int aid = RFIFOL(fd,4), cid = RFIFOL(fd,8), size = RFIFOW(fd,2);
+		int aid = RFIFOL(fd,6), cid = RFIFOL(fd,10), size = RFIFOL(fd,2);
 		struct online_char_data* character;
 		DBMap* online_char_db = char_get_onlinedb();
 
@@ -407,19 +407,19 @@ int chmapif_parse_reqsavechar(int fd, int id){
 			return 1;
 		}
 		//Check account only if this ain't final save. Final-save goes through because of the char-map reconnect
-		if (RFIFOB(fd,12) || RFIFOB(fd,13) || (
+		if (RFIFOB(fd,14) || RFIFOB(fd,15) || (
 			(character = (struct online_char_data*)idb_get(online_char_db, aid)) != NULL &&
 			character->char_id == cid))
 		{
 			struct mmo_charstatus char_dat;
-			memcpy(&char_dat, RFIFOP(fd,13), sizeof(struct mmo_charstatus));
+			memcpy(&char_dat, RFIFOP(fd,15), sizeof(struct mmo_charstatus));
 			char_mmo_char_tosql(cid, &char_dat);
 		} else {	//This may be valid on char-server reconnection, when re-sending characters that already logged off.
 			ShowError("parse_from_map (save-char): Received data for non-existant/offline character (%d:%d).\n", aid, cid);
 			char_set_char_online(id, cid, aid);
 		}
 
-		if (RFIFOB(fd,12))
+		if (RFIFOB(fd,14))
 		{	//Flag, set character offline after saving. [Skotlex]
 			char_set_char_offline(cid, aid);
 			WFIFOHEAD(fd,10);
@@ -1050,21 +1050,21 @@ int chmapif_parse_reqauth(int fd, int id){
 				cd = (struct mmo_charstatus*)uidb_get(char_db_,char_id);
 		}
 		if( runflag == CHARSERVER_ST_RUNNING && autotrade && cd ){
-			uint16 mmo_charstatus_len = sizeof(struct mmo_charstatus) + 25;
+			uint32 mmo_charstatus_len = sizeof(struct mmo_charstatus) + 25;
 			if (cd->sex == 99)
 				cd->sex = sex;
 
 			WFIFOHEAD(fd,mmo_charstatus_len);
 			WFIFOW(fd,0) = 0x2afd;
-			WFIFOW(fd,2) = mmo_charstatus_len;
-			WFIFOL(fd,4) = account_id;
-			WFIFOL(fd,8) = 0;
-			WFIFOL(fd,12) = 0;
-			WFIFOL(fd,16) = 0;
-			WFIFOL(fd,20) = 0;
-			WFIFOB(fd,24) = 0;
-			memcpy(WFIFOP(fd,25), cd, sizeof(struct mmo_charstatus));
-			WFIFOSET(fd, WFIFOW(fd,2));
+			WFIFOL(fd,2) = mmo_charstatus_len;
+			WFIFOL(fd,6) = account_id;
+			WFIFOL(fd,10) = 0;
+			WFIFOL(fd,14) = 0;
+			WFIFOL(fd,18) = 0;
+			WFIFOL(fd,22) = 0;
+			WFIFOB(fd,26) = 0;
+			memcpy(WFIFOP(fd,27), cd, sizeof(struct mmo_charstatus));
+			WFIFOSET(fd, WFIFOL(fd,2));
 
 			char_set_char_online(id, char_id, account_id);
 		} else if( runflag == CHARSERVER_ST_RUNNING &&
@@ -1079,21 +1079,21 @@ int chmapif_parse_reqauth(int fd, int id){
 #endif
 			)
 		{// auth ok
-			uint16 mmo_charstatus_len = sizeof(struct mmo_charstatus) + 25;
+			uint32 mmo_charstatus_len = sizeof(struct mmo_charstatus) + 25;
 			if (cd->sex == 99)
 				cd->sex = sex;
 
 			WFIFOHEAD(fd,mmo_charstatus_len);
 			WFIFOW(fd,0) = 0x2afd;
-			WFIFOW(fd,2) = mmo_charstatus_len;
-			WFIFOL(fd,4) = account_id;
-			WFIFOL(fd,8) = node->login_id1;
-			WFIFOL(fd,12) = node->login_id2;
-			WFIFOL(fd,16) = (uint32)node->expiration_time; // FIXME: will wrap to negative after "19-Jan-2038, 03:14:07 AM GMT"
-			WFIFOL(fd,20) = node->group_id;
-			WFIFOB(fd,24) = node->changing_mapservers;
-			memcpy(WFIFOP(fd,25), cd, sizeof(struct mmo_charstatus));
-			WFIFOSET(fd, WFIFOW(fd,2));
+			WFIFOL(fd,2) = mmo_charstatus_len;
+			WFIFOL(fd,6) = account_id;
+			WFIFOL(fd,10) = node->login_id1;
+			WFIFOL(fd,14) = node->login_id2;
+			WFIFOL(fd,18) = (uint32)node->expiration_time; // FIXME: will wrap to negative after "19-Jan-2038, 03:14:07 AM GMT"
+			WFIFOL(fd,22) = node->group_id;
+			WFIFOB(fd,26) = node->changing_mapservers;
+			memcpy(WFIFOP(fd,27), cd, sizeof(struct mmo_charstatus));
+			WFIFOSET(fd, WFIFOL(fd,2));
 
 			// only use the auth once and mark user online
 			idb_remove(auth_db, account_id);
diff --git a/src/common/socket.c b/src/common/socket.c
index 2e5d3f6..329202d 100644
--- a/src/common/socket.c
+++ b/src/common/socket.c
@@ -703,11 +703,12 @@ int WFIFOSET(int fd, size_t len)
 		exit(EXIT_FAILURE);
 	}
 
-	if( len > 0xFFFF )
+	if( len > 0xFFFFFFFF )
 	{
 		// dynamic packets allow up to UINT16_MAX bytes (<packet_id>.W <packet_len>.W ...)
 		// all known fixed-size packets are within this limit, so use the same limit
-		ShowFatalError("WFIFOSET: Packet 0x%x is too big. (len=%u, max=%u)\n", (*(uint16*)(s->wdata + s->wdata_size)), (unsigned int)len, 0xFFFF);
+		// changed to 0xFFFFFFFF due to changing storage sizes
+		ShowFatalError("WFIFOSET: Packet 0x%x is too big. (len=%u, max=%u)\n", (*(uint32*)(s->wdata + s->wdata_size)), (unsigned int)len, 0xFFFFFFFF);
 		exit(EXIT_FAILURE);
 	}
 	else if( len == 0 )
diff --git a/src/map/chrif.c b/src/map/chrif.c
index 2c0fc76..bc23af0 100644
--- a/src/map/chrif.c
+++ b/src/map/chrif.c
@@ -32,7 +32,7 @@ static struct eri *auth_db_ers; //For reutilizing player login structures.
 static DBMap* auth_db; // int id -> struct auth_node*
 
 static const int packet_len_table[0x3d] = { // U - used, F - free
-	60, 3,-1,-1,10,-1, 6,-1,	// 2af8-2aff: U->2af8, U->2af9, U->2afa, U->2afb, U->2afc, U->2afd, U->2afe, U->2aff
+	60, 3,-1,-1,10,-2, 6,-1,	// 2af8-2aff: U->2af8, U->2af9, U->2afa, U->2afb, U->2afc, U->2afd, U->2afe, U->2aff
 	 6,-1,19, 7,-1,39,30, 10,	// 2b00-2b07: U->2b00, U->2b01, U->2b02, U->2b03, U->2b04, U->2b05, U->2b06, U->2b07
 	 6,30, 10, -1,86, 7,44,34,	// 2b08-2b0f: U->2b08, U->2b09, U->2b0a, U->2b0b, U->2b0c, U->2b0d, U->2b0e, U->2b0f
 	11,10,10, 0,11, -1,266,10,	// 2b10-2b17: U->2b10, U->2b11, U->2b12, F->2b13, U->2b14, U->2b15, U->2b16, U->2b17
@@ -283,7 +283,7 @@ int chrif_isconnected(void) {
  * Flag = 3: Character used @autotrade
  *------------------------------------------*/
 int chrif_save(struct map_session_data *sd, int flag) {
-	uint16 mmo_charstatus_len = 0;
+	uint32 mmo_charstatus_len = 0;
 	nullpo_retr(-1, sd);
 
 	pc_makesavestatus(sd);
@@ -315,10 +315,10 @@ int chrif_save(struct map_session_data *sd, int flag) {
 	mmo_charstatus_len = sizeof(sd->status) + 13;
 	WFIFOHEAD(char_fd, mmo_charstatus_len);
 	WFIFOW(char_fd,0) = 0x2b01;
-	WFIFOW(char_fd,2) = mmo_charstatus_len;
-	WFIFOL(char_fd,4) = sd->status.account_id;
-	WFIFOL(char_fd,8) = sd->status.char_id;
-	WFIFOB(char_fd,12) = (flag==1)?1:0; //Flag to tell char-server this character is quitting.
+	WFIFOL(char_fd,2) = mmo_charstatus_len;
+	WFIFOL(char_fd,6) = sd->status.account_id;
+	WFIFOL(char_fd,10) = sd->status.char_id;
+	WFIFOB(char_fd,14) = (flag==1)?1:0; //Flag to tell char-server this character is quitting.
 
 	// If the user is on a instance map, we have to fake his current position
 	if( map[sd->bl.m].instance_id ){
@@ -329,13 +329,13 @@ int chrif_save(struct map_session_data *sd, int flag) {
 		// Change his current position to his savepoint
 		memcpy( &status.last_point, &status.save_point, sizeof( struct point ) );
 		// Copy the copied status into the packet
-		memcpy( WFIFOP( char_fd, 13 ), &status, sizeof( struct mmo_charstatus ) );
+		memcpy( WFIFOP( char_fd, 15 ), &status, sizeof( struct mmo_charstatus ) );
 	} else {
 		// Copy the whole status into the packet
-		memcpy( WFIFOP( char_fd, 13 ), &sd->status, sizeof( struct mmo_charstatus ) );
+		memcpy( WFIFOP( char_fd, 15 ), &sd->status, sizeof( struct mmo_charstatus ) );
 	}
 
-	WFIFOSET(char_fd, WFIFOW(char_fd,2));
+	WFIFOSET(char_fd, WFIFOL(char_fd,2));
 
 	if( sd->status.pet_id > 0 && sd->pd )
 		intif_save_petdata(sd->status.account_id,&sd->pd->pet);
@@ -669,18 +669,18 @@ void chrif_authok(int fd) {
 	TBL_PC* sd;
 
 	//Check if both servers agree on the struct's size
-	if( RFIFOW(fd,2) - 25 != sizeof(struct mmo_charstatus) ) {
-		ShowError("chrif_authok: Data size mismatch! %d != %d\n", RFIFOW(fd,2) - 25, sizeof(struct mmo_charstatus));
+	if( RFIFOL(fd,2) - 25 != sizeof(struct mmo_charstatus) ) {
+		ShowError("chrif_authok: Data size mismatch! %d != %d\n", RFIFOL(fd,2) - 25, sizeof(struct mmo_charstatus));
 		return;
 	}
 
-	account_id = RFIFOL(fd,4);
-	login_id1 = RFIFOL(fd,8);
-	login_id2 = RFIFOL(fd,12);
-	expiration_time = (time_t)(int32)RFIFOL(fd,16);
-	group_id = RFIFOL(fd,20);
-	changing_mapservers = (RFIFOB(fd,24));
-	status = (struct mmo_charstatus*)RFIFOP(fd,25);
+	account_id = RFIFOL(fd,6);
+	login_id1 = RFIFOL(fd,10);
+	login_id2 = RFIFOL(fd,14);
+	expiration_time = (time_t)(int32)RFIFOL(fd,18);
+	group_id = RFIFOL(fd,22);
+	changing_mapservers = (RFIFOB(fd,26));
+	status = (struct mmo_charstatus*)RFIFOP(fd,27);
 	char_id = status->char_id;
 
 	//Check if we don't already have player data in our server
@@ -1762,7 +1762,7 @@ int chrif_bsdata_received(int fd) {
  *
  *------------------------------------------*/
 int chrif_parse(int fd) {
-	int packet_len;
+	uint32 packet_len;
 
 	// only process data from the char-server
 	if ( fd != char_fd ) {
@@ -1803,6 +1803,12 @@ int chrif_parse(int fd) {
 			if (RFIFOREST(fd) < 4)
 				return 0;
 			packet_len = RFIFOW(fd,2);
+
+		}
+		else if (packet_len == -2) { // dynamic-length packet, but instead of a WORD a LONG holds the length
+			if (RFIFOREST(fd) < 4)
+				return 0;
+			packet_len = RFIFOL(fd, 2);
 		}
 
 		if ((int)RFIFOREST(fd) < packet_len)
@@ -2001,8 +2007,8 @@ void do_final_chrif(void) {
  *
  *------------------------------------------*/
 void do_init_chrif(void) {
-	if(sizeof(struct mmo_charstatus) > 0xFFFF){
-		ShowError("mmo_charstatus size = %d is too big to be transmitted. (must be below 0xFFFF) \n",
+	if(sizeof(struct mmo_charstatus) > 0xFFFFFFFF){
+		ShowError("mmo_charstatus size = %d is too big to be transmitted. (must be below 0xFFFFFFFF) \n",
 			sizeof(struct mmo_charstatus));
 		exit(EXIT_FAILURE);
 	}
-- 
2.8.1.windows.1

From faae83a5efc74a01d55d6a19fef3d0db2caddac0 Mon Sep 17 00:00:00 2001
From: nitrous <vincents.995@gmail.com>
Date: Mon, 22 Aug 2016 10:43:03 +0000
Subject: [PATCH] interserver fifo size increased

---
 src/common/socket.h | 2 +-
 src/map/chrif.c     | 2 +-
 2 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/src/common/socket.h b/src/common/socket.h
index 3fa62ec..7ef1406 100644
--- a/src/common/socket.h
+++ b/src/common/socket.h
@@ -17,7 +17,7 @@
 
 #include <time.h>
 
-#define FIFOSIZE_SERVERLINK 256*1024
+#define FIFOSIZE_SERVERLINK 256*1024*2
 
 // socket I/O macros
 #define RFIFOHEAD(fd)
diff --git a/src/map/chrif.c b/src/map/chrif.c
index bc23af0..f24437c 100644
--- a/src/map/chrif.c
+++ b/src/map/chrif.c
@@ -1806,7 +1806,7 @@ int chrif_parse(int fd) {
 
 		}
 		else if (packet_len == -2) { // dynamic-length packet, but instead of a WORD a LONG holds the length
-			if (RFIFOREST(fd) < 4)
+			if (RFIFOREST(fd) < 6)
 				return 0;
 			packet_len = RFIFOL(fd, 2);
 		}
-- 
2.8.1.windows.1


